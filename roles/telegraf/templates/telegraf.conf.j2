# Telegraf Configuration
#
# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.
#
# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.
#
# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.
#
# Environment variables can be used anywhere in this config file, simply surround
# them with ${}. For strings the variable must be within quotes (ie, "${STR_VAR}"),
# for numbers and booleans they should be plain (ie, ${INT_VAR}, ${BOOL_VAR})


# Global tags can be specified here in key="value" format.
[global_tags]
{% if telegraf_tags is defined and telegraf_tags != None %}
{% for key, value in telegraf_tags.items()%}
   {{ key }} = "{{ value }}"
{% endfor %}
{% endif %}

# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "{{ telegraf_agent_interval }}"

  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = {{ telegraf_round_interval }}

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = {{ telegraf_metric_batch_size }}

  ## Maximum number of unwritten metrics per output.  Increasing this value
  ## allows for longer periods of output downtime without dropping metrics at the
  ## cost of higher maximum memory usage.
  metric_buffer_limit = {{ telegraf_metric_buffer_limit }}

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "{{ telegraf_collection_jitter }}"

  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "{{ telegraf_flush_interval }}"

  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "{{ telegraf_flush_jitter }}"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""

  ## Log at debug level.
  debug = {{ telegraf_logging_debug|lower }}
  ## Log only error level messages.
  # quiet = false

  ## Log target controls the destination for logs and can be one of "file",
  ## "stderr" or, on Windows, "eventlog".  When set to "file", the output file
  ## is determined by the "logfile" setting.
  # logtarget = "file"

  ## Name of the file to be logged to when using the "file" logtarget.  If set to
  ## the empty string then logs are written to stderr.
  # logfile = ""

{% if telegraf_logging_file is defined and telegraf_logging_file|length %}
  logtarget = "file"
  logfile = "{{ telegraf_logging_file }}"
{% endif %}

  ## The logfile will be rotated after the time interval specified.  When set
  ## to 0 no time based rotation is performed.  Logs are rotated only when
  ## written to, if there is no log activity rotation may be delayed.
  # logfile_rotation_interval = "0d"
{% if telegraf_logfile_rotation_interval is defined and telegraf_logfile_rotation_interval|length %}
  logfile_rotation_interval = "{{ telegraf_logfile_rotation_interval }}"
{% endif %}

  ## The logfile will be rotated when it becomes larger than the specified
  ## size.  When set to 0 no size based rotation is performed.
  # logfile_rotation_max_size = "0MB"
{% if telegraf_logfile_rotation_max_size is defined and telegraf_logfile_rotation_max_size|length %}
  logfile_rotation_max_size = "{{ telegraf_logfile_rotation_max_size }}"
{% endif %}

  ## Maximum number of rotated archives to keep, any older logs are deleted.
  ## If set to -1, no archives are removed.
  # logfile_rotation_max_archives = 5
  logfile_rotation_max_archives = {{ telegraf_logfile_rotation_max_archives }}

  # Override default hostname, if empty use os.Hostname()
{% if telegraf_hostname is defined and telegraf_hostname != None %}
  hostname = "{{ telegraf_hostname }}"
{% else %}
  hostname = "{{ ansible_hostname }}"
{% endif %}

  ## If set to true, do not set the "host" tag in the telegraf agent.
  omit_hostname = {{ telegraf_omit_hostname }}

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# Configuration for sending metrics to InfluxDB
[[outputs.influxdb_v2]]
  ## The URLs of the InfluxDB cluster nodes.
  ##
  ## Multiple URLs can be specified for a single cluster, only ONE of the
  ## urls will be written to each interval.
  ## urls exp: http://127.0.0.1:9999
  urls = ["$INFLUX_URL"]

  ## Token for authentication.
  token = "$INFLUX_TOKEN"

  ## Organization is the name of the organization you wish to write to; must exist.
  organization = "$INFLUX_ORG"

  ## Destination bucket to write into.
  bucket = "telegraf"

  ## The value of this tag will be used to determine the bucket.  If this
  ## tag is not set the 'bucket' option is used as the default.
  bucket_tag = "influxdb_bucket"

###############################################################################
#                                  PLUGINS                                    #
###############################################################################

{% macro printValue(key, value) %}
  {%- if value is sequence and value is not string -%}
    {%- if value[0] is number -%}
{{ key }} = [ {{ value|join(', ') }} ]
    {%- else -%}
{{ key }} = [ "{{ value|join('", "') }}" ]
    {%- endif -%}
  {%- else -%}
    {%- if value == "true" or value == "false" or value is number -%}
{{ key }} = {{ value | lower }}
    {%- else -%}
{{ key }} = "{{ value }}"
    {%- endif -%}
  {%- endif -%}
{% endmacro %}

{% if telegraf_plugins is defined and telegraf_plugins is iterable %}
{% for plugin in telegraf_plugins %}

[[inputs.{{ plugin.name }}]]
{% if plugin.options is defined and plugin.options is iterable %}
{% for k, v in plugin.options.items() %}
{% if v is mapping %}
  [inputs.{{ plugin.name }}.{{ k }}]
{% for k2, v2 in v.items() %}
    {{ printValue(k2, v2) }}
{% endfor %}
{% else %}
  {{ printValue(k, v) }}
{% endif %}
{% endfor %}
{% endif %}
{% if plugin.tags is defined and plugin.tags is iterable %}
  [inputs.{{ plugin.name }}.tags]
{% for k, v in plugin.tags.items() %}
    {{ k }} = "{{ v }}"
{% endfor %}
{% endif %}
{% endfor %}
{% else %}
# No plugins configured, added a mem plugin so Telegraf doesn't stop working.
[[inputs.mem]]
{% endif %}

## [true/false] Turn on debug messages in the output. Do not wrap this in quotes.
## Recommend trying this so you know what it looks like. I personally leave it on.
debug = {{ unpackerr_docker_debug }}

## Disable writing messages to stdout/stderr. This silences the app. Set a log
## file below if you set this to true. Recommended when starting with systemctl.
quiet = {{ unpackerr_docker_quiet }}

## Send error output to stderr instead of stdout by setting error_stderr to true.
## Recommend leaving this at false. Ignored if quiet (above) is true.
error_stderr = {{ unpackerr_docker_error_stderr }}

## Setting activity to true will silence all app queue log lines with only zeros.
## Set this to true when you want less log spam.
activity = {{ unpackerr_docker_activity }}

## The Starr-application activity queue is logged on an interval.
## Adjust that interval with this setting.
## Default is a minute. 2m, 5m, 10m, 30m, 1h are also perfectly acceptable.
log_queues = "{{ unpackerr_docker_log_queues }}"

## Write messages to a log file. This is the same data that is normally output to stdout.
## This setting is great for Docker users that want to export their logs to a file.
## The alternative is to use syslog to log the output of the application to a file.
## Default is no log file; this is unset. log_files=0 turns off auto-rotation.
## Default files is 10 and size(mb) is 10 Megabytes; both doubled if debug is true.
log_file = '{{ unpackerr_docker_log_file }}'
log_files = {{ unpackerr_docker_log_files }}
log_file_mb = {{ unpackerr_docker_log_file_mb }}

## How often to poll sonarr and radarr.
## Recommend 1m-5m. Uses Go Duration.
interval = "{{ unpackerr_docker_interval }}"

## How long an item must be queued (download complete) before extraction will start.
## One minute is the historic default and works well. Set higher if your downloads
## take longer to finalize (or transfer locally). Uses Go Duration.
start_delay = "{{ unpackerr_docker_start_delay }}"

## How long to wait before removing the history for a failed extraction.
## Once the history is deleted the item will be recognized as new and
## extraction will start again. Uses Go Duration.
retry_delay = "{{ unpackerr_docker_retry_delay }}"

## How many files may be extracted in parallel. 1 works fine.
## Do not wrap the number in quotes. Raise this only if you have fast disks and CPU.
parallel = 1

## Use these configurations to control the file modes used for newly extracted
## files and folders. Recommend 0644/0755 or 0666/0777.
file_mode = "{{ unpackerr_docker_file_mode }}"
dir_mode = "{{ unpackerr_docker_dir_mode }}"

[webserver]
## The web server currently only supports metrics; set this to true if you wish to use it.
metrics = {{ unpackerr_docker_metrics }}

## This may be set to a port or an ip:port to bind a specific IP. 0.0.0.0 binds ALL IPs.
listen_addr = "{{ unpackerr_docker_web_listen_addr }}"

## Recommend setting a log file for HTTP requests. Otherwise, they go with other logs.
log_file = "{{ unpackerr_docker_web_log_file }}"

## This app automatically rotates logs. Set these to the size and number to keep.
log_files = {{ unpackerr_docker_web_log_files }}
log_file_mb = {{ unpackerr_docker_web_log_file_mb }}

## Set both of these to valid file paths to enable HTTPS/TLS.
ssl_cert_file = ""
ssl_key_file = ""

## Base URL from which to serve content.
urlbase = "{{ unpackerr_docker_web_urlbase }}"

## Upstreams should be set to the IP or CIDR of your trusted upstream proxy.
## Setting this correctly allows X-Forwarded-For to be used in logs.
## In the future it may control auth proxy trust. Must be a list of strings.
#
# example: upstreams = [ "127.0.0.1/32", "10.1.2.0/24" ]
upstreams = [ {{ '\"' + unpackerr_docker_web_upstreams | join('\", \"') + '\"' }} ] 

{% for s in unpackerr_docker_lidarr %}
[[lidarr]]
url = "{{ s['url'] }}"
api_key = "{{ s['api_key'] }}"
paths = ["{{ s['paths'] | join(',') }}"]
protocols = "{{ s['protocols'] }}"
timeout = "{{ s['timeout'] }}"
delete_delay = "{{ s['delete_delay'] }}"
delete_orig = {{ s['delete_orig'] | lower }}
syncthing = {{ s['syncthing'] | lower }}

{% endfor %}

{% for s in unpackerr_docker_radarr %}
[[radarr]]
url = "{{ s['url'] }}"
api_key = "{{ s['api_key'] }}"
paths = ["{{ s['paths'] | join(',') }}"]
protocols = "{{ s['protocols'] }}"
timeout = "{{ s['timeout'] }}"
delete_delay = "{{ s['delete_delay'] }}"
delete_orig = {{ s['delete_orig'] | lower }}
syncthing = {{ s['syncthing'] | lower }}

{% endfor %}

{% for s in unpackerr_docker_readarr %}
[[readarr]]
url = "{{ s['url'] }}"
api_key = "{{ s['api_key'] }}"
paths = ["{{ s['paths'] | join(',') }}"]
protocols = "{{ s['protocols'] }}"
timeout = "{{ s['timeout'] }}"
delete_delay = "{{ s['delete_delay'] }}"
delete_orig = {{ s['delete_orig'] | lower }}
syncthing = {{ s['syncthing'] | lower }}

{% endfor %}

{% for s in unpackerr_docker_sonarr %}
[[sonarr]]
url = "{{ s['url'] }}"
api_key = "{{ s['api_key'] }}"
paths = ["{{ s['paths'] | join(',') }}"]
protocols = "{{ s['protocols'] }}"
timeout = "{{ s['timeout'] }}"
delete_delay = "{{ s['delete_delay'] }}"
delete_orig = {{ s['delete_orig'] | lower }}
syncthing = {{ s['syncthing'] | lower }}

{% endfor %}

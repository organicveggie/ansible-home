---
- name: "traefik | Define fqdn"
  ansible.builtin.set_fact:
    _nas_traefik_fqdn: "traefik.{{ veggie_nas_domain_name }}"

# - name: "traefik`1` | Setup Docker network"
#   community.docker.docker_network:
#     name: "{{ nas_docker_networks.traefik.name }}"
#     driver: "bridge"
#     enable_ipv6: "no"
#     internal: "no"
#     scope: "local"
#     ipam_config:
#       - subnet: "{{ nas_docker_networks.traefik.subnet }}"
#         gateway: "{{ nas_docker_networks.traefik.gateway }}"

###
### Configure additional networks, ports, and entrypoints
###
- name: "traefik | Process extra networks"
  ansible.builtin.include_tasks:
    file: "traefik_network.yml"
  loop:
    # - "{{ nas_docker_networks.traefik.name }}"
    - "{{ nas_docker_networks.calibre_web.name }}"
    - "{{ nas_docker_networks.glances.name }}"
    - "{{ nas_docker_networks.hass.name }}"
    - "{{ nas_docker_networks.influxdb.name }}"
    - "{{ nas_docker_networks.navidrome.name }}"
    - "{{ nas_docker_networks.node_red.name }}"
    - "{{ nas_docker_networks.overseerr.name }}"
    - "{{ nas_docker_networks.portainer.name }}"
    - "{{ nas_docker_networks.tautulli.name }}"

- name: "traefik | Process Servarr network"
  when: "nas_docker_networks.servarr.name | default('') | trim | length > 0"
  block:
    - name: "traefik | Check if Servarr network exists"
      community.docker.docker_network_info:
        name: "{{ nas_docker_networks.servarr.name }}"
      register: "_nas_traefik_servarr_network_info"

    - name: "traefik | Configure for Servarr tools"
      when: "_nas_traefik_servarr_network_info.exists"
      block:
        - name: "traefik | Enable Servarr extra network"
          ansible.builtin.set_fact:
            _nas_traefik_extra_networks: "{{ _nas_traefik_extra_networks | default([]) + [{'name': nas_docker_networks.servarr.name}] }}"

        - name: "traefik | Enable SyncThings (Servarr) ports"
          ansible.builtin.set_fact:
            _nas_traefik_extra_ports: "{{ _nas_traefik_extra_ports | default([]) + nas_traefik_syncthings_ports }}"
        
        - name: "traefik | Enable SyncThings (Servarr) entrypoints"
          ansible.builtin.set_fact:
            _nas_traefik_entrypoints: "{{ _nas_traefik_entrypoints | default({}) | combine(nas_traefik_syncthings_entrypoints) }}"

- name: "traefik | Process UniFi Controller network"
  when: "nas_docker_networks.unific.name | default('') | trim | length > 0"
  block:
    - name: "traefik | Check if UniFi Controller network exists"
      community.docker.docker_network_info:
        name: "{{ nas_docker_networks.unific.name }}"
      register: "_nas_traefik_unific_network_info"

    - name: "traefik | Configure Traefik for UniFi Controller"
      when: "_nas_traefik_unific_network_info.exists"
      block:
        - name: "traefik | Enable UniFi extra network"
          ansible.builtin.set_fact:
            _nas_traefik_extra_networks: "{{ _nas_traefik_extra_networks | default([]) + [{'name': nas_docker_networks.unific.name}] }}"

        - name: "traefik | Enable UniFi Controlller ports"
          ansible.builtin.set_fact:
            _nas_traefik_extra_ports: "{{ _nas_traefik_extra_ports | default([]) + nas_traefik_unific_ports }}"
        
        - name: "traefik | Enable UniFi Controller entrypoints"
          ansible.builtin.set_fact:
            _nas_traefik_entrypoints: "{{ _nas_traefik_entrypoints | default({}) | combine(nas_traefik_unific_entrypoints) }}"

- name: "traefik | Define all ports"
  ansible.builtin.set_fact:
    _nas_traefik_all_ports: "{{ (_nas_traefik_extra_ports | default([]) + nas_traefik_http_ports) | sort }}"

- ansible.builtin.debug:
    msg:
      - "Entrypoints: {{ _nas_traefik_entrypoints | default({}) }}"
      - "Extra networks: {{ _nas_traefik_extra_networks | default([]) }}"
      - "All ports: {{ _nas_traefik_all_ports | default([]) }}"

- name: "traefik | Setup Traefik"
  ansible.builtin.import_role:
    name: "organicveggie.ansible-traefik"
  vars:
    traefik_image: "traefik:2.11"
    traefik_container_environment:
      # AWS_HOSTED_ZONE_ID: "{{ nas_aws_route53_hosted_zone_id }}"
      AWS_ACCESS_KEY_ID: "{{ nas_aws_route53_access_key_id }}"
      AWS_SECRET_ACCESS_KEY: "{{ nas_aws_route53_secret_access_key }}"
      AWS_REGION: "{{ nas_aws_route53_region }}"
      AWS_POLLING_INTERVAL: "15"
      AWS_PROPAGATION_TIMEOUT: "900"
      AWS_TTL: "60"
    traefik_qs_https: "true"
    # traefik_qs_https_redirect: "true"
    traefik_qs_https_le: "true"
    traefik_qs_https_le_mail: "{{ nas_traefik_letsencrypt_email }}"
    traefik_qs_log_level: INFO
    traefik_ports: "{{ _nas_traefik_all_ports }}"
    traefik_hostname: "{{ _nas_traefik_fqdn }}"
    traefik_confkey_api:
      dashboard: true # use this for enabling the dashboard
    traefik_confkey_certificatesResolvers:
      letsencrypt:
        acme:
          email: "{{ nas_traefik_letsencrypt_email }}"
          caServer: "{{ nas_traefik_letsencrypt_ca_server }}"
          dnsChallenge:
            provider: route53
            delayBeforeCheck: "10s"
            disablePropagationCheck: true
            resolvers:
              - "8.8.8.8:53" # Use external DNS to verify TXT record changes
    traefik_labels:
      traefik.enable: "true"
      # Dashboard
      traefik.http.routers.traefik.service: "api@internal"
      traefik.http.routers.traefik.entrypoints: "https"
      traefik.http.routers.traefik.tls.certresolver: "letsencrypt"
      traefik.http.routers.traefik.tls.domains[0].main: "{{ _nas_traefik_fqdn }}"
      # Global redirect to https
      traefik.http.routers.http-catchall.rule: "hostregexp(`{host:.+}`)"
      traefik.http.routers.http-catchall.entrypoints: "http"
      traefik.http.routers.http-catchall.middlewares: "redirect-to-https"
      traefik.http.routers.http-catchall.priority: "10"
      # Middleware redirect
      traefik.http.middlewares.redirect-to-https.redirectscheme.scheme: "https"
    traefik_extra_networks: "{{ _nas_traefik_extra_networks }}"
    traefik_confkey_entryPoints: "{{ _nas_traefik_entrypoints }}"
    traefik_confkey_serversTransport:
      insecureSkipVerify: "true"
    traefik_confkey_log:
      level: INFO
      filePath: "/etc/traefik/log/traefik.log"
      # traefik_confkey_accessLog:
    #   filePath: "/etc/traefik/log/traefik-access.log"
    #   bufferingSize: 500
    #   format: "json"
    #   fields:
    #     # defaultMode: "drop"
    #     names:
    #       ClientAddr: "drop"
    #       ClientHost: "keep"
    #       ClientPort: "drop"
    #       ClientUsername: "drop"
    #       DownstreamContentSize: "drop"
    #       RequestHost: "keep"
    #       RequestLine: "keep"
    #       RequestMethod: "keep"
    #       RequestPath: "keep"
    #       RequestProtocol: "keep"
    #       RequestScheme: "keep"
    #       RouterName": "keep"
    #       ServiceName: "keep"
    #       StartLocal: "keep"
---
- name: "Create Portainer config directory"
  ansible.builtin.file:
    path: "{{ portainer_data_directory }}"
    state: "directory"
    mode: "0770"

- name: "Portainer Docker Volume"
  community.docker.docker_volume:
    name: "{{ portainer_docker_volume_name }}"
    driver_options:
      type: "none"
      device: "{{ portainer_data_directory }}"
      o: "bind"

- name: "Portainer Docker Container"
  community.docker.docker_container:
    name: "portainer"
    image: "portainer/portainer-ce:latest"
    pull: true
    mounts:
      - source: "{{ portainer_docker_volume_name }}"
        target: "/data"
        type: "volume"
      - source: "/var/run/docker.sock"
        target: "/var/run/docker.sock"
        type: "bind"
        read_only: "true"
      - source: "/etc/timezone"
        target: "/etc/timezone"
        type: "bind"
        read_only: "true"
    network_mode: "{{ portainer_network_name }}"
    networks:
      - name: "{{ portainer_network_name }}"
    exposed_ports:
      - "{{ portainer_port }}"
    restart_policy: unless-stopped
    memory: "{{ portainer_memory }}"
    container_default_behavior: no_defaults
    auto_remove: false
    detach: true
    init: false
    interactive: false
    paused: false
    privileged: false
    read_only: false
    tty: false
    labels:
      traefik.enable: "{{ portainer_available_externally }}"
      traefik.http.routers.portainer.rule: "Host(`{{ portainer_hostname }}.{{ portainer_host_domain }}`)"
      traefik.http.routers.portainer.entrypoints: "http,https"
      traefik.http.routers.portainer.tls.certresolver: "letsencrypt"
      traefik.http.routers.portainer.tls.domains[0].main: "*.{{ portainer_host_domain }}"
      traefik.http.services.portainer.loadbalancer.server.port: "{{ portainer_port }}"
  register: portainer_docker

- name: "Debug return values from container"
  ansible.builtin.debug:
    msg: "{{ portainer_docker.container }}"
  when: portainer_setup_debug

- ansible.builtin.set_fact:
    _portainer_is_running: "{{ portainer_docker.container.State.Running }}"

- ansible.builtin.set_fact:
    _portainer_endpoint: "http://{{ portainer_docker.container.NetworkSettings.Networks.get(portainer_network_name).IPAddress }}:{{ portainer_port }}/api"

- name: "Check!!!"
  ansible.builtin.debug:
    msg: "{{ _portainer_is_running }} // {{ _portainer_endpoint }}"

- name: "Check container status"
  ansible.builtin.fail:
    msg: "Portainer did not start: {{ _portainer_is_running }}"
  when: not _portainer_is_running
